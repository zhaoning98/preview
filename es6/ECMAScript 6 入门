1、概述
ES6 模块的设计思想，是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。

ES6 模块的好处：
    1、静态加载
    2、不再需要UMD模块格式了，将来服务器和浏览器都会支持ES6模块格式。
    3、将来浏览器的新API就能用模块格式提供，不再必须做成全局变量或者navigator对象的属性。
    4、不再需要对象作为命名空间（比如Math对象），未来这些功能可以通过模块提供。

2、严格模式
ES6 的模块自动采用严格模式，不管你有没有在模块头部加上 "use strict"; 。

严格模式主要有以下限制：
    - 变量必须声明后再使用
    - 函数的参数不能有同名属性，否则会报错
    - 不能使用 with 语句
    - 不能对只读属性赋值，否则报错
    - 禁止 this 指向全局对象
    ......

其中，尤其需要注意 this 的限制。ES 6 模块之中，顶层的 this 指向undefined ，即不应该在顶层代码使用 this 。

3、export 命令
模块功能主要由两个命令构成： export 和 import 。
export命令用于规定模块的对外接口，
import命令用于其他模块提供的功能。

一个模块就是一个独立的文件。该文件内部的所有变量，外部无法获取。
如果你希望外部能够读取模块内部的某个变量，就必须使用export关键字输出该变量。
下面是一个 JS 文件，里面使用export命令输出变量。

//profile.js
export var firstName = '赵';
export var lastName = '宁';
export var year = 1993;

上面代码是 profile.js 文件，保存了用户信息。
ES6 将其视为一个模块，里面用 export 命令对外部输出了三个变量。

export 的写法，除了像上面这样，还有另外一种。

//profile.js
var firstName = '赵';
var lastName = '宁';
var year = 1993;

export {firstName, lastName, year};

上面代码在 export 命令后面，使用大括号指定所要输出的一组变量。
它与前一种写法是等价的，但是应该优先考虑使用这种写法。
因为这样就可以在脚本尾部，一眼看清楚输出了哪些变量。


export 命令除了输出变量，还可以输出函数或类（class）。

需要特别注意的是，export 命令规定的是对外的接口，必须与模板内部的变量建立一一对应关系。
// 1、报错
export 1;
// 2、报错
var m = 1;
export m;

第一种写法直接输出 1 ， 第二种写法通过变量 m ,韩式直接输出 1 。
1 只是一个值，不是接口。

// 报错
function f() {}
export f;
// 正确
export function f() { };
// 正确
function f() {}
export {f};
